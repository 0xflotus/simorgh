#!/usr/bin/env groovy

def dockerRegistry = "329802642264.dkr.ecr.eu-west-1.amazonaws.com"
def nodeImageVersion = "10.16.0-1"
def nodeImage = "${dockerRegistry}/bbc-news/node-10-lts:${nodeImageVersion}"

def slackChannel = '#si_repo-simorgh'

def notifySlack(messageParameters) {
  def message = "*${env.JOB_NAME} - ${messageParameters.buildStatus} on \"${messageParameters.branchName}\" [build #${env.BUILD_NUMBER}] ${env.BUILD_URL}*"

  slackSend(
    channel: messageParameters.slackChannel,
    color: messageParameters.colour,
    message: message
  )
}

pipeline {
  agent any
  triggers {
      cron('H 0 6-6/2 * * 1-5')
  }
  options {
    timeout(time: 90, unit: 'MINUTES')
    timestamps ()
  }
  environment {
    APP_DIRECTORY = "app"
    CI = true
  }
  stages {
    stage ('All Env Tests') {
      when {
        expression { env.BRANCH_NAME != 'latest' }
      }
      parallel {
        stage ('Local production tests') {
          agent {
            docker {
              image "${nodeImage}"
              args '-u root -v /etc/pki:/certs'
            }
          }
          steps {
            sh 'make install'
            sh 'CYPRESS_SMOKE=false make productionTests'
          }
        }
        stage ('Test E2Es') {
          agent {
            docker {
              image "${nodeImage}"
              args '-u root -v /etc/pki:/certs'
            }
          }
          steps {
            sh 'make install'
            sh 'CYPRESS_SMOKE=false CYPRESS_APP_ENV=test npm run cypress'
          }
        }
        stage ('Live E2Es') {
          agent {
            docker {
              image "${nodeImage}"
              args '-u root -v /etc/pki:/certs'
            }
          }
          steps {
            sh 'make install'
            sh 'CYPRESS_SMOKE=false CYPRESS_APP_ENV=live npm run cypress'
          }
        }
      }
    }
  }
  post {
    always {
      // Clean the workspace
      cleanWs()
    }
    success {
      script {
        if(env.BRANCH_NAME == 'latest') {
          def messageParameters = [
            buildStatus: 'Success',
            branchName: env.BRANCH_NAME,
            colour: 'good',
            slackChannel: slackChannel
          ]
          notifySlack(messageParameters)
        }
      }
    }
    aborted {
      script {
        if(env.BRANCH_NAME == 'latest') {
          def messageParameters = [
            buildStatus: 'Aborted',
            branchName: env.BRANCH_NAME,
            colour: 'warning',
            slackChannel: slackChannel
          ]
          notifySlack(messageParameters)
        }
      }
    }
    failure {
      script {
        if(env.BRANCH_NAME == 'latest') {
          def messageParameters = [
            buildStatus: 'Failed',
            branchName: env.BRANCH_NAME,
            colour: 'danger',
            slackChannel: slackChannel
          ]
          notifySlack(messageParameters)
        }
      }
    }
    unstable {
      script {
        if(env.BRANCH_NAME == 'latest') {
          def messageParameters = [
            buildStatus: 'Unstable',
            branchName: env.BRANCH_NAME,
            colour: 'danger',
            slackChannel: slackChannel
          ]
          notifySlack(messageParameters)
        }
      }
    }
  }
}
