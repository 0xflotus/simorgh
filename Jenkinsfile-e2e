#!/usr/bin/env groovy

def nodeImage = "329802642264.dkr.ecr.eu-west-1.amazonaws.com/bbc-news/node-10-lts:10.16.0-1"
def slackChannel = '#si_repo-infra-sandbox'

// Run latest every 3 hours, between 6 & 6, Monday - Friday
def cron_string = env.BRANCH_NAME == "latest" ? "H 0 6-6/3 * * 1-5" : ""

def notifySlack(messageParameters) {
  def message = "${messageParameters.emoji} Simorgh E2Es ${messageParameters.buildStatus} on \"${messageParameters.branchName}\" [build #${env.BUILD_NUMBER}] ${env.BUILD_URL}"

  slackSend(
    channel: messageParameters.slackChannel,
    color: messageParameters.colour,
    message: message
  )
}

node {
  properties([pipelineTriggers([cron(cron_string)])])
  timeout(time: 90, unit: 'MINUTES') {
    withEnv([
      'CI=true'
    ]) {
      cleanWs() // Clean the workspace
      checkout scm // Checkout from git
      docker.image("${nodeImage}").inside {
        try {
          stage ('Install & Setup') {
            sh 'make install'
          }
          stage ('Running E2Es across environments') {
            parallel (
              'Local Prod Tests': {
                try {
                  sh 'make localProductionTests'
                } catch (Throwable e) {
                  def messageParameters = [
                    buildStatus: 'Failed on LOCAL',
                    branchName: env.BRANCH_NAME,
                    colour: 'danger',
                    emoji: 'ðŸ˜±',
                    slackChannel: slackChannel
                  ]
                  notifySlack(messageParameters)

                  throw e
                }   
              },
              'Test E2Es': {
                try {
                  sh 'make testE2Es'
                } catch (Throwable e) {
                  def messageParameters = [
                    buildStatus: 'Failed on TEST',
                    branchName: env.BRANCH_NAME,
                    colour: 'danger',
                    emoji: 'ðŸ˜±',
                    slackChannel: slackChannel
                  ]
                  notifySlack(messageParameters)

                  throw e
                }
              },
              'Live E2Es': {
                try {
                  sh 'make liveE2Es'
                } catch (Throwable e) {
                  def messageParameters = [
                    buildStatus: 'Failed on LIVE',
                    branchName: env.BRANCH_NAME,
                    colour: 'danger',
                    emoji: 'ðŸ˜±',
                    slackChannel: slackChannel
                  ]
                  notifySlack(messageParameters)

                  throw e
                } 
              }
            )
          }
        } catch (Throwable e) {
          echo "The pipeline has failed with the error: ${e}"
          throw e
        } finally {
          if (env.BRANCH_NAME != 'latest') {
            switch (currentBuild.status) {
              case 'SUCCESS':
                def messageParameters = [
                  buildStatus: 'Success',
                  branchName: env.BRANCH_NAME,
                  colour: 'good',
                  emoji: 'ðŸ¤Ÿ',
                  slackChannel: slackChannel
                ]
                notifySlack(messageParameters)
                break
              case 'UNSTABLE':
                def messageParameters = [
                  buildStatus: 'Unstable',
                  branchName: env.BRANCH_NAME,
                  colour: 'danger',
                  emoji: 'ðŸ˜±',
                  slackChannel: slackChannel
                ]
                notifySlack(messageParameters)
                break
              case 'ABORTED':
                def messageParameters = [
                  buildStatus: 'Aborted',
                  branchName: env.BRANCH_NAME,
                  colour: 'warning',
                  emoji: 'ðŸ™€',
                  slackChannel: slackChannel
                ]
                notifySlack(messageParameters)
                break
              default:
                def messageParameters = [
                  buildStatus: 'Unknown build state',
                  branchName: env.BRANCH_NAME,
                  colour: 'danger',
                  emoji: 'ðŸ˜±',
                  slackChannel: slackChannel
                ]
                notifySlack(messageParameters)
                break
            }
          }
        }
      }
    }
  }
}