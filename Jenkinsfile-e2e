#!/usr/bin/env groovy

def dockerRegistry = "329802642264.dkr.ecr.eu-west-1.amazonaws.com"
def nodeImageVersion = "10.16.0-1"
def nodeImage = "${dockerRegistry}/bbc-news/node-10-lts:${nodeImageVersion}"

def stageName = ""
def packageName = 'simorgh.zip'
def storybookDist = 'storybook.zip'
def staticAssetsDist = 'static.zip'

def runE2eTestsLocal(){
  sh 'make install'
  sh 'CYPRESS_SMOKE=false make productionTests'
}

def runE2eTestsTest(){
  sh 'make install'
  sh 'CYPRESS_SMOKE=false CYPRESS_APP_ENV=test npm run cypress'
}

def runE2eTestsLive(){
  sh 'make install'
  sh 'CYPRESS_SMOKE=false CYPRESS_APP_ENV=live npm run cypress'
}

def notifySlack(messageParameters) {
  def message = "*${env.JOB_NAME} - ${messageParameters.buildStatus} on \"${messageParameters.branchName}\" at \"${messageParameters.stageName}\" [build #${env.BUILD_NUMBER}] ${env.BUILD_URL}*"

  slackSend(
    channel: messageParameters.slackChannel,
    color: messageParameters.colour,
    message: message
  )
}

pipeline {
  agent any
  options {
    timeout(time: 90, unit: 'MINUTES')
    timestamps ()
  }
  environment {
    APP_DIRECTORY = "app"
    CI = true
  }
  parameters {
    string(name: 'SLACK_CHANNEL', defaultValue: '#si_repo-simorgh', description: 'The Slack channel where the build status is posted.')
  }
  stages {
    stage ('Build and Test') {
      when {
        expression { env.BRANCH_NAME != 'latest' }
      }
      parallel {
        stage ('Test Development') {
          agent {
            docker {
              image "${nodeImage}"
              args '-u root -v /etc/pki:/certs'
            }
          }
          steps {
            runE2eTestsLocal()
          }
        }
        stage ('Test E2Es') {
          agent {
            docker {
              image "${nodeImage}"
              args '-u root -v /etc/pki:/certs'
            }
          }
          steps {
            runE2eTestsTest()
          }
        }
        stage ('Live E2Es') {
          agent {
            docker {
              image "${nodeImage}"
              args '-u root -v /etc/pki:/certs'
            }
          }
          steps {
            runE2eTestsLive()
          }
        }
      }
      post {
        always {
          script {
            stageName = env.STAGE_NAME
          }
        }
      }
    }
  }
  post {
    always {
      // Clean the workspace
      cleanWs()
    }
    success {
      script {
        if(env.BRANCH_NAME == 'latest') {
          def messageParameters = [
            buildStatus: 'Success',
            branchName: env.BRANCH_NAME,
            colour: 'good',
            slackChannel: params.SLACK_CHANNEL,
            stageName: stageName
          ]
          notifySlack(messageParameters)
        }
      }
    }
    aborted {
      script {
        if(env.BRANCH_NAME == 'latest') {
          def messageParameters = [
            buildStatus: 'Aborted',
            branchName: env.BRANCH_NAME,
            colour: 'warning',
            slackChannel: params.SLACK_CHANNEL,
            stageName: stageName
          ]
          notifySlack(messageParameters)
        }
      }
    }
    failure {
      script {
        if(env.BRANCH_NAME == 'latest') {
          def messageParameters = [
            buildStatus: 'Failed',
            branchName: env.BRANCH_NAME,
            colour: 'danger',
            slackChannel: params.SLACK_CHANNEL,
            stageName: stageName
          ]
          notifySlack(messageParameters)
        }
      }
    }
    unstable {
      script {
        if(env.BRANCH_NAME == 'latest') {
          def messageParameters = [
            buildStatus: 'Unstable',
            branchName: env.BRANCH_NAME,
            colour: 'danger',
            slackChannel: params.SLACK_CHANNEL,
            stageName: stageName
          ]
          notifySlack(messageParameters)
        }
      }
    }
  }
}
