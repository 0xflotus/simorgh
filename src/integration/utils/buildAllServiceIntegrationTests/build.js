/* eslint-disable no-console */

const fs = require('fs');
const path = require('path');
const prettier = require('prettier');
const acorn = require('acorn');
const walk = require('acorn-walk');
const escodegen = require('escodegen');
const glob = require('glob');

const FULL_SERVICE_INTEGRATION_TEST_DIR = '__full_service_regression_tests__';
const GENERATED_TEST_FILES_DIR = '__GENERATED_TEST_FILES__';

module.exports = ({ service, variant = '', pageType, pathname }) =>
  new Promise((resolve) => {
    glob(
      `../../pages/${pageType}/**/*.test.js`,
      {
        cwd: path.join(__dirname),
      },
      (error, files) => {
        if (error) {
          console.log(error);
          return;
        }

        if (!files.length) return;

        const ampTests = files.filter((file) => file.endsWith('amp.test.js'));
        const canonicalTests = files.filter((file) =>
          file.endsWith('canonical.test.js'),
        );
        const testExamplesToGenerateFrom = [
          ...[ampTests[0]],
          ...[canonicalTests[0]],
        ];

        testExamplesToGenerateFrom.forEach((filePath) => {
          const fileName = filePath.split('/').pop();

          const tests = fs.readFileSync(path.join(__dirname, filePath), 'utf8');

          const node = acorn.parse(tests, { sourceType: 'module' });

          walk.simple(node, {
            ImportDeclaration(_node) {
              if (_node.source.value.startsWith('../')) {
                // eslint-disable-next-line no-param-reassign
                _node.source.value = `../../../../${
                  variant ? '../' : ''
                }pages/${pageType}/${_node.source.value.substring(3)}`;
              }
            },
          });

          const fileContent = `
            /**
             * @service ${service}
             * @pathname ${pathname}
             *
             * THIS TEST SUITE WAS GENERATED BY A BUILD SCRIPT. DO NOT EDIT THIS FILE.
             */
  
            ${escodegen.generate(node)}
          `;

          const prettierConfig = prettier.resolveConfig.sync(
            path.join(__dirname, filePath),
          );
          const prettyFileContent = prettier.format(fileContent, {
            ...prettierConfig,
            parser: 'babel',
          });
          const testDirPath = path.join(
            __dirname,
            '../../',
            FULL_SERVICE_INTEGRATION_TEST_DIR,
            GENERATED_TEST_FILES_DIR,
            service,
            variant,
            pageType,
          );

          fs.mkdirSync(testDirPath, {
            recursive: true,
          });

          fs.writeFileSync(
            path.join(testDirPath, fileName),
            prettyFileContent,
            'utf8',
          );
          resolve();
        });
      },
    );
  });
